datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  activities    Activity[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Activity {
  id                            String     @id
  external_id                   String?
  upload_id                     BigInt?
  athlete_id                    BigInt?
  name                          String?
  distance                      Float?
  moving_time                   Int?
  elapsed_time                  Int?
  total_elevation_gain          Float?
  elev_high                     Float?
  elev_low                      Float?
  type                          String?
  sport_type                    SportType?
  start_date                    DateTime?
  start_date_local              DateTime?
  timezone                      String?
  start_latlng                  Float[]
  end_latlng                    Float[]
  achievement_count             Int?
  kudos_count                   Int?
  comment_count                 Int?
  athlete_count                 Int?
  photo_count                   Int?
  total_photo_count             Int?
  map_id                        String?
  map_summary_polyline          String?
  trainer                       Boolean?
  commute                       Boolean?
  manual                        Boolean?
  private                       Boolean?
  flagged                       Boolean?
  workout_type                  Int?
  upload_id_str                 String?
  average_speed                 Float?
  max_speed                     Float?
  has_kudoed                    Boolean?
  hide_from_home                Boolean?
  gear_id                       String?
  kilojoules                    Float?
  average_watts                 Float?
  device_watts                  Boolean?
  max_watts                     Int?
  weighted_average_watts        Int?
  user_id                       String
  user                          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  utc_offset                    Int?
  location_city                 String?
  location_state                String?
  location_country              String?
  visibility                    String?
  has_heartrate                 Boolean?
  heartrate_opt_out             Boolean?
  display_hide_heartrate_option Boolean?
  from_accepted_tag             Boolean?
  pr_count                      Int?
  average_cadence               Float?
  average_heartrate             Float?
  max_heartrate                 Float?
}

enum SportType {
  AlpineSki
  BackcountrySki
  Badminton
  Canoeing
  Crossfit
  EBikeRide
  Elliptical
  EMountainBikeRide
  Golf
  GravelRide
  Handcycle
  HighIntensityIntervalTraining
  Hike
  IceSkate
  InlineSkate
  Kayaking
  Kitesurf
  MountainBikeRide
  NordicSki
  Pickleball
  Pilates
  Racquetball
  Ride
  RockClimbing
  RollerSki
  Rowing
  Run
  Sail
  Skateboard
  Snowboard
  Snowshoe
  Soccer
  Squash
  StairStepper
  StandUpPaddling
  Surfing
  Swim
  TableTennis
  Tennis
  TrailRun
  Velomobile
  VirtualRide
  VirtualRow
  VirtualRun
  Walk
  WeightTraining
  Wheelchair
  Windsurf
  Workout
  Yoga
}
